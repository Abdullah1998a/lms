export const exercises = [
    {
        id: 1,
        lessonId: 2,
        title: "حساب المتوسط الحسابي",
        description:
            "اكتب برنامج يقوم بقراءة ثلاثة أعداد صحيحة من المستخدم ثم يقوم بحساب وطباعة متوسطها الحسابي.",
        difficultyId: 1,
        difficulty: "مبتدئ",
        language: "cpp",
        startingCode: `
#include <iostream>
using namespace std;

int main() {
    // قم بتعريف المتغيرات اللازمة هنا
    
    // اقرأ الأعداد الثلاثة من المستخدم
    
    // احسب المتوسط الحسابي
    
    // اطبع النتيجة
    
    return 0;
}`,
        solution: `
\`\`\`cpp
#include <iostream>
using namespace std;

int main() {
    // تعريف المتغيرات
    int num1, num2, num3;
    double average;
    // قراءة الأعداد من المستخدم
    cout << "أدخل ثلاثة أعداد صحيحة: ";
    cin >> num1 >> num2 >> num3;
    // حساب المتوسط
    average = (num1 + num2 + num3) / 3.0;
    // طباعة النتيجة
    cout << "المتوسط الحسابي هو: " << average << endl;
    return 0;
}
\`\`\`
`,
        algorithm: `
1. تعريف ثلاثة متغيرات من نوع عدد صحيح (num1, num2, num3) لتخزين الأعداد المدخلة
2. تعريف متغير من نوع عدد كسري (average) لتخزين النتيجة
3. عرض رسالة للمستخدم لإدخال ثلاثة أعداد صحيحة
4. قراءة الأعداد الثلاثة من المستخدم
5. حساب المتوسط عن طريق جمع الأعداد الثلاثة وقسمة المجموع على 3.0
6. عرض النتيجة للمستخدم
7. إنهاء البرنامج
`,
        hints: [
            "استخدم متغيرات من نوع int لتخزين الأعداد الصحيحة",
            "استخدم متغير من نوع double لتخزين المتوسط الحسابي لأنه قد يكون عدداً كسرياً",
            "تأكد من القسمة على 3.0 (وليس 3) للحصول على نتيجة كسرية دقيقة"
        ],
        requiresInput: true,
        sampleInput: "10 20 30",
        inputDescription: "أدخل ثلاثة أعداد صحيحة مفصولة بمسافات"
    },
    {
        id: 2,
        lessonId: 2,
        title: "تحويل درجة الحرارة",
        description:
            "اكتب برنامج يقوم بتحويل درجة الحرارة من النظام المئوي (سلسيوس) إلى النظام الفهرنهايتي. استخدم المعادلة: F = (C × 9/5) + 32",
        difficultyId: 1,
        difficulty: "مبتدئ",
        language: "cpp",
        startingCode: `
#include <iostream>
using namespace std;

int main() {
    // قم بتعريف المتغيرات اللازمة هنا
    
    // اقرأ درجة الحرارة بالسلسيوس من المستخدم
    
    // حول درجة الحرارة إلى فهرنهايت
    
    // اطبع النتيجة
    
    return 0;
}`,
        solution: `
\`\`\`cpp
#include <iostream>
using namespace std;

int main() {
    // تعريف المتغيرات
    double celsius, fahrenheit;
    // قراءة درجة الحرارة بالسلسيوس
    cout << "أدخل درجة الحرارة بالسلسيوس: ";
    cin >> celsius;
    // تحويل درجة الحرارة إلى فهرنهايت
    fahrenheit = (celsius * 9/5) + 32;
    // طباعة النتيجة
    cout << celsius << " درجة مئوية تعادل " << fahrenheit << " درجة فهرنهايت" << endl;
    return 0;
}
\`\`\`
`,
        algorithm: `
1. تعريف متغيرين من نوع عدد كسري (celsius, fahrenheit) لتخزين قيم درجات الحرارة
2. عرض رسالة للمستخدم لإدخال درجة الحرارة بالسلسيوس
3. قراءة قيمة السلسيوس من المستخدم
4. تحويل درجة الحرارة إلى فهرنهايت باستخدام المعادلة: F = (C × 9/5) + 32
5. عرض النتيجة التي تبين قيمة السلسيوس الأصلية والقيمة المحولة بالفهرنهايت
6. إنهاء البرنامج
`,
        hints: [
            "استخدم متغيرات من نوع double لتخزين درجات الحرارة لأنها قد تكون كسرية",
            "تأكد من استخدام 9.0/5 أو 9/5.0 في المعادلة للحصول على نتيجة دقيقة",
            "تذكر أن معادلة التحويل هي: F = (C × 9/5) + 32"
        ],
        requiresInput: true,
        sampleInput: "25",
        inputDescription:
            "أدخل درجة الحرارة بالسلسيوس كرقم (يمكن أن يكون كسرياً)"
    },
    {
        id: 3,
        lessonId: 2,
        title: "حساب المعادلات الرياضية",
        description:
            "اكتب برنامج يقوم بقراءة قيمتين x و y من المستخدم ثم يقوم بحساب وطباعة نتائج المعادلات التالية: \na = x² + 2y \nb = a² + 3x \nc = a×y - b×x",
        difficultyId: 2,
        difficulty: "متوسط",
        language: "cpp",
        startingCode: `
#include <iostream>
#include <cmath> // تضمين مكتبة الرياضيات
using namespace std;

int main() {
    // قم بتعريف المتغيرات اللازمة هنا
    
    // اقرأ قيم x و y من المستخدم
    
    // احسب المعادلات الثلاث
    
    // اطبع النتائج
    
    return 0;
}`,
        solution: `
\`\`\`cpp
#include <iostream>
#include <cmath> // تضمين مكتبة الرياضيات للدوال الرياضية مثل pow
using namespace std;

int main() {
    // تعريف المتغيرات
    double x, y, a, b, c;
    // قراءة قيم x و y
    cout << "أدخل قيمة x: ";
    cin >> x;
    cout << "أدخل قيمة y: ";
    cin >> y;
    // حساب المعادلات
    a = pow(x, 2) + 2 * y;  // يمكن استخدام x * x بدلاً من pow(x, 2)
    b = pow(a, 2) + 3 * x;
    c = a * y - b * x;
    // طباعة النتائج
    cout << "a = x² + 2y = " << a << endl;
    cout << "b = a² + 3x = " << b << endl;
    cout << "c = a×y - b×x = " << c << endl;
    return 0;
}
\`\`\`
`,
        algorithm: `
1. تعريف خمسة متغيرات من نوع عدد كسري (x, y, a, b, c) لتخزين القيم المدخلة والنتائج
2. عرض رسالة للمستخدم لإدخال قيم x و y
3. قراءة قيم x و y من المستخدم
4. حساب a باستخدام المعادلة: a = x² + 2y
5. حساب b باستخدام المعادلة: b = a² + 3x
6. حساب c باستخدام المعادلة: c = a×y - b×x
7. عرض النتائج الثلاثة (a, b, c) مع المعادلات المقابلة لها
8. إنهاء البرنامج
`,
        hints: [
            "استخدم مكتبة <cmath> للدوال الرياضية مثل pow() لحساب الأسس",
            "احسب قيمة a أولاً، ثم استخدمها لحساب b، ثم استخدمهما معاً لحساب c",
            "يمكنك استخدام x * x بدلاً من pow(x, 2) لرفع x للقوة 2"
        ],
        requiresInput: true,
        sampleInput: "3 4",
        inputDescription: "أدخل قيمة x ثم قيمة y، كل على سطر منفصل"
    },
    {
        id: 4,
        lessonId: 2,
        title: "حساب مساحة ومحيط الأشكال الهندسية",
        description:
            "اكتب برنامج يسمح للمستخدم باختيار شكل هندسي (دائرة، مستطيل، أو مثلث) ثم يقوم بقراءة الأبعاد اللازمة وحساب مساحة ومحيط الشكل المختار.",
        difficultyId: 2,
        difficulty: "متوسط",
        language: "cpp",
        startingCode: `
#include <iostream>
#include <cmath>
using namespace std;

int main() {
    // قم بتعريف المتغيرات اللازمة هنا
    
    // اعرض قائمة بالأشكال المتاحة واطلب من المستخدم الاختيار
    
    // اقرأ الأبعاد اللازمة حسب الشكل المختار
    
    // احسب المساحة والمحيط
    
    // اطبع النتائج
    
    return 0;
}`,
        solution: `
\`\`\`cpp
#include <iostream>
#include <cmath>
using namespace std;

int main() {
    int choice;
    double area, perimeter;
    const double PI = 3.14159;
    cout << "اختر شكلاً هندسياً:" << endl;
    cout << "1. دائرة" << endl;
    cout << "2. مستطيل" << endl;
    cout << "3. مثلث" << endl;
    cout << "اختيارك (1-3): ";
    cin >> choice;
    if (choice == 1) {
        // الدائرة
        double radius;
        cout << "أدخل نصف قطر الدائرة: ";
        cin >> radius;
        area = PI * pow(radius, 2);
        perimeter = 2 * PI * radius;
        cout << "مساحة الدائرة: " << area << endl;
        cout << "محيط الدائرة: " << perimeter << endl;
    }
    else if (choice == 2) {
        // المستطيل
        double length, width;
        cout << "أدخل طول المستطيل: ";
        cin >> length;
        cout << "أدخل عرض المستطيل: ";
        cin >> width;
        area = length * width;
        perimeter = 2 * (length + width);
        cout << "مساحة المستطيل: " << area << endl;
        cout << "محيط المستطيل: " << perimeter << endl;
    }
    else if (choice == 3) {
        // المثلث
        double a, b, c;
        cout << "أدخل أطوال أضلاع المثلث الثلاثة:" << endl;
        cout << "الضلع الأول: ";
        cin >> a;
        cout << "الضلع الثاني: ";
        cin >> b;
        cout << "الضلع الثالث: ";
        cin >> c;
        // حساب المحيط
        perimeter = a + b + c;
        // حساب المساحة باستخدام صيغة هيرون
        double s = perimeter / 2;
        area = sqrt(s * (s - a) * (s - b) * (s - c));
        cout << "مساحة المثلث: " << area << endl;
        cout << "محيط المثلث: " << perimeter << endl;
    }
    else {
        cout << "اختيار غير صحيح!" << endl;
    }
    return 0;
}
\`\`\`
`,
        algorithm: `
1. تعريف متغيرات للاختيار، المساحة، المحيط، وتعريف ثابت π (3.14159)
2. عرض قائمة بالأشكال (دائرة، مستطيل، مثلث)
3. قراءة اختيار المستخدم
4. إذا كان الاختيار دائرة:
   أ. طلب وقراءة نصف القطر
   ب. حساب المساحة = π × (نصف القطر)²
   ج. حساب المحيط = 2 × π × نصف القطر
5. وإلا إذا كان الاختيار مستطيل:
   أ. طلب وقراءة الطول والعرض
   ب. حساب المساحة = الطول × العرض
   ج. حساب المحيط = 2 × (الطول + العرض)
6. وإلا إذا كان الاختيار مثلث:
   أ. طلب وقراءة أطوال الأضلاع الثلاثة (a, b, c)
   ب. حساب المحيط = a + b + c
   ج. حساب نصف المحيط s = المحيط / 2
   د. حساب المساحة باستخدام صيغة هيرون: المساحة = √[s(s-a)(s-b)(s-c)]
7. وإلا، عرض رسالة خطأ للاختيار غير الصحيح
8. عرض المساحة والمحيط المحسوبين
9. إنهاء البرنامج
`,
        hints: [
            "استخدم تعليمات if-else للتعامل مع الخيارات المختلفة",
            "استخدم قيمة PI = 3.14159 لحساب مساحة ومحيط الدائرة",
            "لحساب مساحة المثلث، استخدم صيغة هيرون: المساحة = √[s(s-a)(s-b)(s-c)] حيث s = (a+b+c)/2"
        ],
        requiresInput: true,
        sampleInput: "1\n5",
        inputDescription:
            "أدخل رقم الشكل المختار (1، 2، أو 3) ثم أدخل الأبعاد المطلوبة للشكل"
    },
    {
        id: 5,
        lessonId: 2,
        title: "حاسبة الدوال الرياضية",
        description:
            "اكتب برنامج يعمل كحاسبة للدوال الرياضية المتقدمة، بحيث يستطيع المستخدم اختيار إحدى العمليات التالية: الجذر التربيعي، الرفع للقوة، الجيب، جيب التمام، أو اللوغاريتم الطبيعي، ثم يقوم البرنامج بتنفيذ العملية على العدد المدخل وعرض النتيجة.",
        difficultyId: 3,
        difficulty: "متقدم",
        language: "cpp",
        startingCode: `
#include <iostream>
#include <cmath>
using namespace std;

int main() {
    // قم بتعريف المتغيرات اللازمة هنا
    
    // اعرض قائمة بالعمليات المتاحة واطلب من المستخدم الاختيار
    
    // اقرأ العدد المطلوب من المستخدم
    
    // قم بتنفيذ العملية المختارة
    
    // اطبع النتيجة
    
    return 0;
}`,
        solution: `
\`\`\`cpp
#include <iostream>
#include <cmath>
#include <iomanip> // للتحكم بدقة الإخراج
using namespace std;

int main() {
    int choice;
    double number, result;
    cout << "حاسبة الدوال الرياضية المتقدمة" << endl;
    cout << "===============================" << endl;
    cout << "1. الجذر التربيعي (√x)" << endl;
    cout << "2. الرفع للقوة (x^y)" << endl;
    cout << "3. الجيب (sin x)" << endl;
    cout << "4. جيب التمام (cos x)" << endl;
    cout << "5. اللوغاريتم الطبيعي (ln x)" << endl;
    cout << "اختر العملية (1-5): ";
    cin >> choice;
    switch (choice) {
        case 1: // الجذر التربيعي
            cout << "أدخل العدد الذي تريد حساب جذره التربيعي: ";
            cin >> number;
            if (number < 0) {
                cout << "خطأ: لا يمكن حساب الجذر التربيعي لعدد سالب!" << endl;
            } else {
                result = sqrt(number);
                cout << "الجذر التربيعي لـ " << number << " هو: " << result << endl;
            }
            break;
        case 2: // الرفع للقوة
            double exponent;
            cout << "أدخل العدد الأساسي: ";
            cin >> number;
            cout << "أدخل الأس: ";
            cin >> exponent;
            result = pow(number, exponent);
            cout << number << " مرفوع للقوة " << exponent << " يساوي: " << result << endl;
            break;
        case 3: // الجيب
            cout << "أدخل الزاوية بالدرجات: ";
            cin >> number;
            // تحويل الزاوية من درجات إلى راديان لأن دوال المثلثات في C++ تتعامل بالراديان
            double radians = number * M_PI / 180.0;
            result = sin(radians);
            cout << fixed << setprecision(6); // ضبط الدقة لـ 6 أرقام بعد الفاصلة
            cout << "جيب " << number << " درجة هو: " << result << endl;
            break;
        case 4: // جيب التمام
            cout << "أدخل الزاوية بالدرجات: ";
            cin >> number;
            // تحويل الزاوية من درجات إلى راديان
            radians = number * M_PI / 180.0;
            result = cos(radians);
            cout << fixed << setprecision(6);
            cout << "جيب تمام " << number << " درجة هو: " << result << endl;
            break;
        case 5: // اللوغاريتم الطبيعي
            cout << "أدخل العدد الذي تريد حساب لوغاريتمه الطبيعي: ";
            cin >> number;
            if (number <= 0) {
                cout << "خطأ: لا يمكن حساب اللوغاريتم الطبيعي لعدد سالب أو صفر!" << endl;
            } else {
                result = log(number);
                cout << "اللوغاريتم الطبيعي لـ " << number << " هو: " << result << endl;
            }
            break;
        default:
            cout << "اختيار غير صحيح!" << endl;
    }
    return 0;
}
\`\`\`
`,
        algorithm: `
1. تعريف متغيرات لاختيار المستخدم، الرقم (الأرقام) المدخلة، والنتيجة
2. عرض قائمة بالعمليات الرياضية (الجذر التربيعي، الرفع للقوة، الجيب، جيب التمام، اللوغاريتم الطبيعي)
3. قراءة اختيار المستخدم
4. استخدام تعليمة switch للتعامل مع العمليات المختلفة:
   - الحالة 1 (الجذر التربيعي):
     أ. طلب وقراءة رقم
     ب. التحقق من أن الرقم غير سالب
     ج. حساب الجذر التربيعي باستخدام دالة sqrt()
   - الحالة 2 (الرفع للقوة):
     أ. طلب وقراءة العدد الأساسي والأس
     ب. حساب القوة باستخدام دالة pow()
   - الحالة 3 (الجيب):
     أ. طلب وقراءة الزاوية بالدرجات
     ب. تحويل الدرجات إلى راديان (الراديان = الدرجات × π / 180)
     ج. حساب الجيب باستخدام دالة sin()
   - الحالة 4 (جيب التمام):
     أ. طلب وقراءة الزاوية بالدرجات
     ب. تحويل الدرجات إلى راديان
     ج. حساب جيب التمام باستخدام دالة cos()
   - الحالة 5 (اللوغاريتم الطبيعي):
     أ. طلب وقراءة رقم
     ب. التحقق من أن الرقم موجب
     ج. حساب اللوغاريتم الطبيعي باستخدام دالة log()
   - الحالة الافتراضية: عرض رسالة خطأ للاختيار غير الصحيح
5. عرض النتيجة بدقة مناسبة
6. إنهاء البرنامج
`,
        hints: [
            "استخدم switch-case للتعامل مع خيارات المستخدم المختلفة",
            "تذكر أن دوال المثلثات في C++ (مثل sin و cos) تأخذ الزاوية بالراديان وليس بالدرجات، لذا قم بالتحويل المناسب",
            "استخدم مكتبة <iomanip> والتابع setprecision() للتحكم بعدد الأرقام العشرية في النتيجة"
        ],
        requiresInput: true,
        sampleInput: "3\n30",
        inputDescription:
            "أدخل رقم العملية المطلوبة (1-5) ثم القيم اللازمة للعملية"
    },
    {
        id: 6,
        lessonId: 2,
        title: "حل المعادلات التربيعية",
        description:
            "اكتب برنامج يقوم بحل المعادلة التربيعية ax² + bx + c = 0 عن طريق قراءة معاملات المعادلة (a, b, c) من المستخدم ثم حساب وإظهار الحلول (الجذور) المحتملة مع معالجة جميع الحالات الممكنة (حلان حقيقيان مختلفان، حل حقيقي واحد، أو حلان مركبان).",
        difficultyId: 3,
        difficulty: "متقدم",
        language: "cpp",
        startingCode: `
#include <iostream>
#include <cmath>
#include <complex> // لدعم الأعداد المركبة
using namespace std;

int main() {
    // قم بتعريف المتغيرات اللازمة هنا
    
    // اقرأ معاملات المعادلة من المستخدم
    
    // تحقق من قيمة المميز وحل المعادلة
    
    // اعرض الحلول المناسبة
    
    return 0;
}`,
        solution: `
\`\`\`cpp
#include <iostream>
#include <cmath>
#include <complex> // لدعم الأعداد المركبة
#include <iomanip> // للتحكم بدقة الإخراج
using namespace std;

int main() {
    double a, b, c;

    cout << "حل المعادلة التربيعية ax² + bx + c = 0" << endl;
    cout << "=====================================" << endl;
    // قراءة معاملات المعادلة
    cout << "أدخل قيمة a: ";
    cin >> a;
    // التحقق من أن المعادلة تربيعية (a != 0)
    if (a == 0) {
        cout << "هذه ليست معادلة تربيعية لأن a = 0" << endl;
        // في هذه الحالة تصبح المعادلة خطية: bx + c = 0
        if (b == 0) {
            if (c == 0) {
                cout << "المعادلة لها عدد لانهائي من الحلول" << endl;
            } else {
                cout << "المعادلة ليس لها حل" << endl;
            }
        } else {
            double solution = -c / b;
            cout << "المعادلة خطية وحلها هو: x = " << solution << endl;
        }
        return 0;
    }
    cout << "أدخل قيمة b: ";
    cin >> b;
    cout << "أدخل قيمة c: ";
    cin >> c;
    // حساب المميز (discriminant)
    double discriminant = b * b - 4 * a * c;
    cout << fixed << setprecision(4); // ضبط دقة الإخراج
    // معالجة الحالات المختلفة بناءً على قيمة المميز
    if (discriminant > 0) {
        // حالة وجود حلين حقيقيين مختلفين
        double x1 = (-b + sqrt(discriminant)) / (2 * a);
        double x2 = (-b - sqrt(discriminant)) / (2 * a);
        cout << "المعادلة لها حلان حقيقيان مختلفان:" << endl;
        cout << "x₁ = " << x1 << endl;
        cout << "x₂ = " << x2 << endl;
    }
    else if (discriminant == 0) {
        // حالة وجود حل حقيقي واحد (متكرر)
        double x = -b / (2 * a);
        cout << "المعادلة لها حل حقيقي واحد (متكرر):" << endl;
        cout << "x = " << x << endl;
    }
    else {
        // حالة وجود حلين مركبين
        double realPart = -b / (2 * a);
        double imaginaryPart = sqrt(-discriminant) / (2 * a);
        cout << "المعادلة لها حلان مركبان:" << endl;
        cout << "x1 = " << realPart << " + " << imaginaryPart << "i" << endl;
        cout << "x2 = " << realPart << " - " << imaginaryPart << "i" << endl;
        
        // استخدام مكتبة complex (بديل)
        complex<double> x1(realPart, imaginaryPart);
        complex<double> x2(realPart, -imaginaryPart);
        
        // يمكن استخدام الأسطر التالية بدلاً من الطباعة اليدوية أعلاه
        // cout << "x1 = " << x1 << endl;
        // cout << "x2 = " << x2 << endl;
    }
    return 0;
}
\`\`\`
`,
        algorithm: `
1. تعريف متغيرات للمعاملات (a, b, c) والحلول
2. طلب وقراءة المعامل a
3. التحقق مما إذا كان a يساوي صفر:
   - إذا كان a = 0، فهذه ليست معادلة تربيعية:
     أ. التحقق من b = 0:
       - إذا كان c = 0 أيضاً، فهناك عدد لا نهائي من الحلول
       - إذا كان c ≠ 0، فلا يوجد حل
     ب. وإلا، حل المعادلة الخطية: x = -c/b
4. إذا كان a ≠ 0، طلب وقراءة المعاملات b و c
5. حساب المميز: المميز = b² - 4ac
6. بناءً على قيمة المميز:
   - إذا كان المميز > 0:
     أ. حساب جذرين حقيقيين مختلفين:
        x₁ = (-b + √المميز) / (2a)
        x₂ = (-b - √المميز) / (2a)
     ب. عرض كلا الجذرين
   - إذا كان المميز = 0:
     أ. حساب جذر حقيقي واحد (متكرر): x = -b / (2a)
     ب. عرض الجذر
   - إذا كان المميز < 0:
     أ. حساب الجزء الحقيقي: realPart = -b / (2a)
     ب. حساب الجزء التخيلي: imaginaryPart = √(-المميز) / (2a)
     ج. عرض الجذور المركبة: x₁ = realPart + imaginaryPart*i و x₂ = realPart - imaginaryPart*i
7. إنهاء البرنامج
`,
        hints: [
            "استخدم المميز (Discriminant) b² - 4ac لتحديد نوع الحلول",
            "إذا كان المميز موجباً، فهناك حلان حقيقيان مختلفان",
            "إذا كان المميز صفراً، فهناك حل حقيقي واحد (متكرر)",
            "إذا كان المميز سالباً، فهناك حلان مركبان"
        ],
        requiresInput: true,
        sampleInput: "1 -3 2",
        inputDescription:
            "أدخل قيم معاملات المعادلة التربيعية a، b، و c كل على سطر منفصل"
    },
    {
        id: 7,
        lessonId: 3,
        title: "إيجاد العدد الأكبر بين ثلاثة أعداد",
        description:
            "اكتب برنامج يطلب من المستخدم إدخال ثلاثة أعداد صحيحة ثم يقوم بإيجاد وطباعة العدد الأكبر بينهم.",
        difficultyId: 1,
        difficulty: "مبتدئ",
        language: "cpp",
        startingCode: `
#include <iostream>
using namespace std;

int main() {
    int num1, num2, num3;
    // إدخال الأعداد الثلاثة
    cout << "أدخل ثلاثة أعداد: ";
    cin >> num1 >> num2 >> num3;
    // إيجاد العدد الأكبر
    
    // طباعة النتيجة
    
    return 0;
}`,
        solution: `
\`\`\`cpp
#include <iostream>
using namespace std;

int main() {
    int num1, num2, num3;
    // إدخال الأعداد الثلاثة
    cout << "أدخل ثلاثة أعداد: ";
    cin >> num1 >> num2 >> num3;
    // إيجاد العدد الأكبر
    int max = num1;
    if (num2 > max) {
        max = num2;
    }
    if (num3 > max) {
        max = num3;
    }
    // طباعة النتيجة
    cout << "العدد الأكبر هو: " << max << endl;
    return 0;
}
\`\`\`
`,
        algorithm: `
1. طلب إدخال ثلاثة أعداد من المستخدم
2. افتراض أن العدد الأول هو الأكبر
3. مقارنة العدد الثاني مع الأكبر، وإذا كان أكبر، نحفظه كأكبر عدد
4. مقارنة العدد الثالث مع الأكبر، وإذا كان أكبر، نحفظه كأكبر عدد
5. طباعة العدد الأكبر
6. إنهاء البرنامج
`,
        hints: [
            "يمكنك استخدام متغير إضافي لتخزين القيمة الأكبر",
            "استخدم عبارات if للمقارنة بين الأعداد",
            "يمكنك البدء بافتراض أن العدد الأول هو الأكبر ثم مقارنته مع الباقي"
        ],
        requiresInput: true,
        sampleInput: "5 9 2",
        inputDescription: "أدخل ثلاثة أعداد مفصولة بمسافات"
    },
    {
        id: 8,
        lessonId: 3,
        title: "حساب مجموع الأعداد حتى إدخال عدد سالب",
        description:
            "اكتب برنامج يستمر في طلب إدخال أعداد من المستخدم ويقوم بحساب مجموعها حتى يقوم المستخدم بإدخال عدد سالب.",
        difficultyId: 1,
        difficulty: "مبتدئ",
        language: "cpp",
        startingCode: `
#include <iostream>
using namespace std;

int main() {
    int num, sum = 0;
    // كتابة حلقة التكرار لحساب مجموع الأعداد
    
    // طباعة المجموع
    
    return 0;
}`,
        solution: `
\`\`\`cpp
#include <iostream>
using namespace std;

int main() {
    int num, sum = 0;
    // كتابة حلقة التكرار لحساب مجموع الأعداد
    cout << "أدخل عددًا (أدخل عددًا سالبًا للخروج): ";
    cin >> num;
    while (num >= 0) {
        sum += num;
        cout << "أدخل عددًا (أدخل عددًا سالبًا للخروج): ";
        cin >> num;
    }
    // طباعة المجموع
    cout << "مجموع الأعداد المدخلة هو: " << sum << endl;
    return 0;
}
\`\`\`
`,
        algorithm: `
1. تهيئة متغير لتخزين المجموع بقيمة صفر
2. طلب إدخال عدد من المستخدم
3. استخدام حلقة تكرار while تستمر طالما العدد المدخل غير سالب
4. في كل تكرار، إضافة العدد المدخل إلى المجموع
5. طلب إدخال عدد جديد
6. عند إدخال عدد سالب، الخروج من الحلقة وطباعة المجموع
7. إنهاء البرنامج
`,
        hints: [
            "استخدم حلقة while للاستمرار في طلب الأعداد",
            "قم بإضافة كل عدد إلى متغير المجموع",
            "شرط الخروج من الحلقة هو إدخال عدد سالب"
        ],
        requiresInput: true,
        sampleInput: "5 3 7 2 -1",
        inputDescription: "أدخل عددًا في كل مرة، وأدخل عددًا سالبًا للخروج"
    },
    {
        id: 9,
        lessonId: 3,
        title: "حل معادلة من الدرجة الثانية",
        description:
            "اكتب برنامج لحل معادلة من الدرجة الثانية من الشكل: ax^2 + bx + c = 0 مع مناقشة جميع الحالات الممكنة (بما في ذلك الحالات الخاصة عندما a=0 أو b=0 أو c=0).",
        difficultyId: 2,
        difficulty: "متوسط",
        language: "cpp",
        startingCode: `
#include <iostream>
#include <cmath>
using namespace std;

int main() {
    double a, b, c;
    // طلب إدخال معاملات المعادلة
    cout << "أدخل معاملات المعادلة (a b c): ";
    cin >> a >> b >> c;
    // التحقق من الحالات المختلفة وحل المعادلة
    
    return 0;
}`,
        solution: `
\`\`\`cpp
#include <iostream>
#include <cmath>
using namespace std;

int main() {
    double a, b, c;
    // طلب إدخال معاملات المعادلة
    cout << "أدخل معاملات المعادلة (a b c): ";
    cin >> a >> b >> c;
    // التحقق من الحالات المختلفة وحل المعادلة
    if (a == 0) {
        // المعادلة من الدرجة الأولى: bx + c = 0
        if (b == 0) {
            if (c == 0) {
                cout << "المعادلة لها عدد لا نهائي من الحلول" << endl;
            } else {
                cout << "المعادلة ليس لها حلول" << endl;
            }
        } else {
            cout << "المعادلة من الدرجة الأولى وحلها هو: x = " << -c / b << endl;
        }
    } else {
        // المعادلة من الدرجة الثانية: ax^2 + bx + c = 0
        double delta = b * b - 4 * a * c;
        if (delta > 0) {
            double x1 = (-b + sqrt(delta)) / (2 * a);
            double x2 = (-b - sqrt(delta)) / (2 * a);
            cout << "المعادلة لها حلان حقيقيان مختلفان:" << endl;
            cout << "x1 = " << x1 << endl;
            cout << "x2 = " << x2 << endl;
        } else if (delta == 0) {
            double x = -b / (2 * a);
            cout << "المعادلة لها حل حقيقي وحيد: x = " << x << endl;
        } else {
            double realPart = -b / (2 * a);
            double imaginaryPart = sqrt(-delta) / (2 * a);
            cout << "المعادلة لها حلان مركبان:" << endl;
            cout << "x1 = " << realPart << " + " << imaginaryPart << "i" << endl;
            cout << "x2 = " << realPart << " - " << imaginaryPart << "i" << endl;
        }
    }
    return 0;
}
\`\`\`
`,
        algorithm: `
1. طلب إدخال معاملات المعادلة a، b، و c
2. التحقق مما إذا كانت a تساوي صفر:
   - إذا كانت a = 0 وكانت b = 0 وكانت c = 0، فالمعادلة لها عدد لا نهائي من الحلول
   - إذا كانت a = 0 وكانت b = 0 وكانت c ≠ 0، فالمعادلة ليس لها حلول
   - إذا كانت a = 0 وكانت b ≠ 0، فالمعادلة من الدرجة الأولى وحلها x = -c/b
3. إذا كانت a ≠ 0، فالمعادلة من الدرجة الثانية:
   - حساب delta = b² - 4ac
   - إذا كانت delta > 0، فالمعادلة لها حلان حقيقيان مختلفان: x1 = (-b + √delta)/(2a) و x2 = (-b - √delta)/(2a)
   - إذا كانت delta = 0، فالمعادلة لها حل حقيقي وحيد: x = -b/(2a)
   - إذا كانت delta < 0، فالمعادلة لها حلان مركبان: x1 = -b/(2a) + √(-delta)/(2a)i و x2 = -b/(2a) - √(-delta)/(2a)i
4. إنهاء البرنامج
`,
        hints: [
            "تذكر حالات خاصة عندما تكون a أو b أو c تساوي صفر",
            "استخدم دالة sqrt() من مكتبة cmath لحساب الجذر التربيعي",
            "تذكر أن المعادلة من الدرجة الثانية يمكن أن يكون لها حلول حقيقية أو مركبة اعتمادًا على قيمة delta"
        ],
        requiresInput: true,
        sampleInput: "1 -5 6",
        inputDescription: "أدخل معاملات المعادلة (a b c) مفصولة بمسافات"
    },
    {
        id: 10,
        lessonId: 3,
        title: "آلة حاسبة بسيطة باستخدام switch-case",
        description:
            "اكتب برنامج لطباعة لائحة خيارات (جمع، طرح، ضرب، قسمة، إنهاء البرنامج) بحيث يتيح للمستخدم إدخال رقمين واختيار العملية التي يريدها، ومن ثم يعيد العملية حتى يختار الخروج من البرنامج.",
        difficultyId: 2,
        difficulty: "متوسط",
        language: "cpp",
        startingCode: `
#include <iostream>
using namespace std;

int main() {
    int choice;
    double num1, num2;
    // كتابة حلقة التكرار للاستمرار حتى يختار المستخدم الخروج
    
    return 0;
}`,
        solution: `
\`\`\`cpp
#include <iostream>
using namespace std;

int main() {
    int choice;
    double num1, num2;
    do {
        // عرض القائمة
        cout << "\\n===== الآلة الحاسبة البسيطة =====" << endl;
        cout << "1. جمع عددين" << endl;
        cout << "2. طرح عددين" << endl;
        cout << "3. ضرب عددين" << endl;
        cout << "4. قسمة عددين" << endl;
        cout << "5. الخروج من البرنامج" << endl;
        cout << "اختر العملية (1-5): ";
        cin >> choice;
        // التحقق إذا اختار المستخدم الخروج
        if (choice == 5) {
            cout << "شكرًا لاستخدامك الآلة الحاسبة. إلى اللقاء!" << endl;
            break;
        }
        // طلب إدخال الرقمين
        cout << "أدخل العدد الأول: ";
        cin >> num1;
        cout << "أدخل العدد الثاني: ";
        cin >> num2;
        // تنفيذ العملية المختارة
        switch (choice) {
            case 1:
                cout << "ناتج الجمع: " << num1 << " + " << num2 << " = " << num1 + num2 << endl;
                break;
            case 2:
                cout << "ناتج الطرح: " << num1 << " - " << num2 << " = " << num1 - num2 << endl;
                break;
            case 3:
                cout << "ناتج الضرب: " << num1 << " * " << num2 << " = " << num1 * num2 << endl;
                break;
            case 4:
                if (num2 != 0) {
                    cout << "ناتج القسمة: " << num1 << " / " << num2 << " = " << num1 / num2 << endl;
                } else {
                    cout << "خطأ: لا يمكن القسمة على صفر!" << endl;
                }
                break;
            default:
                cout << "خيار غير صالح. يرجى إدخال رقم من 1 إلى 5." << endl;
        }
    } while (true); // استمرار الحلقة إلى أن يتم كسرها عند اختيار الخروج
    return 0;
}
\`\`\`
`,
        algorithm: `
1. إنشاء حلقة do-while تستمر حتى يتم كسرها عند اختيار الخروج
2. في كل تكرار:
   - عرض قائمة بالخيارات المتاحة (جمع، طرح، ضرب، قسمة، خروج)
   - طلب من المستخدم اختيار العملية المراد تنفيذها
   - التحقق إذا اختار المستخدم الخروج (الخيار 5)، فإذا كان كذلك، نكسر الحلقة
   - طلب إدخال عددين من المستخدم
   - استخدام عبارة switch-case لتنفيذ العملية المختارة
   - في حالة القسمة، التحقق من أن العدد الثاني ليس صفرًا
   - إذا كان الخيار غير صالح، طباعة رسالة خطأ
3. إنهاء البرنامج
`,
        hints: [
            "استخدم حلقة do-while للسماح بتكرار العمليات",
            "استخدم break للخروج من الحلقة عند اختيار الخروج",
            "تذكر التحقق من أن المقسوم عليه لا يساوي صفرًا في عملية القسمة"
        ],
        requiresInput: true,
        sampleInput: "1\n5\n3\n2\n5\n10\n5",
        inputDescription:
            "اختر العملية المطلوبة (1-5) ثم أدخل العددين إذا لزم الأمر"
    },
    {
        id: 11,
        lessonId: 3,
        title: "جمع توقيتين",
        description:
            "اكتب برنامج يقوم بجمع توقيتين، على أن الوقت مؤلف من ثلاث متغيرات (ثواني من 0 إلى 59، دقائق من 0 إلى 59، ساعات). الوقت يمكن أن يتجاوز 24 ساعة.",
        difficultyId: 3,
        difficulty: "متقدم",
        language: "cpp",
        startingCode: `
#include <iostream>
using namespace std;

int main() {
    int hours1, minutes1, seconds1;
    int hours2, minutes2, seconds2;
    int totalHours, totalMinutes, totalSeconds;
    // طلب إدخال الوقت الأول
    cout << "أدخل الوقت الأول (ساعات دقائق ثواني): ";
    cin >> hours1 >> minutes1 >> seconds1;
    // طلب إدخال الوقت الثاني
    cout << "أدخل الوقت الثاني (ساعات دقائق ثواني): ";
    cin >> hours2 >> minutes2 >> seconds2;
    // حساب مجموع الوقتين
    
    // طباعة النتيجة
    
    return 0;
}`,
        solution: `
\`\`\`cpp
#include <iostream>
using namespace std;

int main() {
    int hours1, minutes1, seconds1;
    int hours2, minutes2, seconds2;
    int totalHours, totalMinutes, totalSeconds;
    // طلب إدخال الوقت الأول
    cout << "أدخل الوقت الأول (ساعات دقائق ثواني): ";
    cin >> hours1 >> minutes1 >> seconds1;
    // التحقق من صحة الإدخال الأول
    if (minutes1 < 0 || minutes1 > 59 || seconds1 < 0 || seconds1 > 59 || hours1 < 0) {
        cout << "خطأ: أدخل قيمًا صحيحة للوقت الأول." << endl;
        return 1;
    }
    // طلب إدخال الوقت الثاني
    cout << "أدخل الوقت الثاني (ساعات دقائق ثواني): ";
    cin >> hours2 >> minutes2 >> seconds2;
    // التحقق من صحة الإدخال الثاني
    if (minutes2 < 0 || minutes2 > 59 || seconds2 < 0 || seconds2 > 59 || hours2 < 0) {
        cout << "خطأ: أدخل قيمًا صحيحة للوقت الثاني." << endl;
        return 1;
    }
    // حساب مجموع الوقتين
    totalSeconds = seconds1 + seconds2;
    totalMinutes = minutes1 + minutes2;
    totalHours = hours1 + hours2;
    // تعديل القيم إذا تجاوزت الحدود
    if (totalSeconds >= 60) {
        totalMinutes += totalSeconds / 60;
        totalSeconds %= 60;
    }
    if (totalMinutes >= 60) {
        totalHours += totalMinutes / 60;
        totalMinutes %= 60;
    }
    // طباعة النتيجة
    cout << "مجموع الوقتين: " << totalHours << " ساعة، " << totalMinutes << " دقيقة، " << totalSeconds << " ثانية" << endl;
    
    return 0;
}
\`\`\`
`,
        algorithm: `
1. طلب إدخال الوقت الأول (ساعات، دقائق، ثواني)
2. التحقق من صحة الإدخال الأول:
   - يجب أن تكون الدقائق والثواني بين 0 و59
   - يجب أن تكون الساعات غير سالبة
3. طلب إدخال الوقت الثاني (ساعات، دقائق، ثواني)
4. التحقق من صحة الإدخال الثاني بنفس الطريقة
5. حساب مجموع الوقتين:
   - جمع الثواني مع بعضها
   - جمع الدقائق مع بعضها
   - جمع الساعات مع بعضها
6. تعديل القيم إذا تجاوزت الحدود:
   - إذا كان مجموع الثواني >= 60، إضافة عدد صحيح من الدقائق وإبقاء باقي القسمة كثواني
   - إذا كان مجموع الدقائق >= 60، إضافة عدد صحيح من الساعات وإبقاء باقي القسمة كدقائق
7. طباعة مجموع الوقتين بالشكل المناسب
8. إنهاء البرنامج
`,
        hints: [
            "استخدم عامل القسمة (/) للحصول على عدد الدقائق من الثواني وعامل باقي القسمة (%) للحصول على باقي الثواني",
            "تأكد من التحقق من صحة الإدخال قبل إجراء العمليات الحسابية",
            "لا تنسَ أن الوقت النهائي يمكن أن يتجاوز 24 ساعة"
        ],
        requiresInput: true,
        sampleInput: "5 45 30\n3 30 45",
        inputDescription:
            "أدخل الوقت الأول ثم الوقت الثاني بالشكل: ساعات دقائق ثواني"
    },
    {
        id: 12,
        lessonId: 3,
        title: "تحليل مجموعة من الأعداد",
        description:
            "اكتب برنامج لإدخال مجموعة من الأعداد الصحيحة (يتم تحديد عددها في البداية)، ثم حساب وطباعة مجموعهم ومتوسطهم الحسابي وإيجاد أصغر عدد وأكبر عدد بينهم.",
        difficultyId: 3,
        difficulty: "متقدم",
        language: "cpp",
        startingCode: `
#include <iostream>
using namespace std;

int main() {
    int n;
    // طلب إدخال عدد الأعداد
    cout << "أدخل عدد الأعداد: ";
    cin >> n;
    // التحقق من صحة الإدخال
    if (n <= 0) {
        cout << "يجب إدخال عدد موجب من الأعداد." << endl;
        return 1;
    }
    // إدخال الأعداد وحساب المطلوب
    
    // طباعة النتائج
    
    return 0;
}`,
        solution: `
\`\`\`cpp
#include <iostream>
using namespace std;

int main() {
    int n;
    // طلب إدخال عدد الأعداد
    cout << "أدخل عدد الأعداد: ";
    cin >> n;
    // التحقق من صحة الإدخال
    if (n <= 0) {
        cout << "يجب إدخال عدد موجب من الأعداد." << endl;
        return 1;
    }
    // متغيرات لتخزين النتائج
    int number;
    int sum = 0;
    double average;
    int min, max;
    cout << "أدخل " << n << " أعداد:" << endl;
    // إدخال العدد الأول
    cout << "العدد 1: ";
    cin >> number;
    sum = number;
    min = max = number;
    // إدخال باقي الأعداد
    for (int i = 2; i <= n; i++) {
        cout << "العدد " << i << ": ";
        cin >> number;
        // تحديث المجموع
        sum += number;
        // تحديث القيمة الصغرى
        if (number < min) {
            min = number;
        }
        // تحديث القيمة العظمى
        if (number > max) {
            max = number;
        }
    }
    // حساب المتوسط
    average = static_cast<double>(sum) / n;
    // طباعة النتائج
    cout << "\\n===== النتائج =====\\n";
    cout << "المجموع: " << sum << endl;
    cout << "المتوسط الحسابي: " << average << endl;
    cout << "العدد الأصغر: " << min << endl;
    cout << "العدد الأكبر: " << max << endl;
    return 0;
}
\`\`\`
`,
        algorithm: `
1. طلب إدخال عدد الأعداد n
2. التحقق من أن n موجب
3. إدخال العدد الأول واعتباره الأصغر والأكبر في البداية، وحفظه في متغير المجموع
4. استخدام حلقة for لإدخال (n-1) أعداد متبقية:
   - إضافة كل عدد إلى المجموع
   - تحديث القيمة الصغرى إذا كان العدد الجديد أصغر
   - تحديث القيمة العظمى إذا كان العدد الجديد أكبر
5. حساب المتوسط الحسابي بقسمة المجموع على عدد الأعداد
6. طباعة النتائج (المجموع، المتوسط الحسابي، العدد الأصغر، العدد الأكبر)
7. إنهاء البرنامج
`,
        hints: [
            "استخدم حلقة for لإدخال الأعداد وحساب المطلوب",
            "تذكر تحويل المجموع إلى قيمة عشرية قبل حساب المتوسط باستخدام static_cast<double>",
            "يمكنك البدء بتهيئة القيمة الصغرى والعظمى بالعدد الأول المدخل"
        ],
        requiresInput: true,
        sampleInput: "5\n10\n25\n5\n18\n7",
        inputDescription: "أدخل عدد الأعداد ثم أدخل الأعداد واحدًا تلو الآخر"
    }
];
