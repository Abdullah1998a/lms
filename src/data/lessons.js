export const lessons = [
    {
        id: 1,
        title: "مدخل إلى البرمجة والخوارزميات",
        hasExercises: false,
        content: `
## أنواع الآلات
---
1. **الآلات ذات البرامج الثابتة**: 
   - لا يمكن وضع برامج لها.
   - مثال: نول الخياطة (يعمل على برنامج ثابت، يعطي نتيجة واحدة فقط).

2. **الآلات القابلة للبرمجة**: 
   - آلات حديثة يمكن أن تنفذ مدخلات متعددة.
   - تحتاج إلى لغات برمجة خاصة بها.
   - تختلف لغات البرمجة من آلة إلى أخرى.

## بنية الآلة القابلة للبرمجة
---
تتكون الآلة القابلة للبرمجة من وحدات مختلفة تعمل معاً لتنفيذ البرامج.

![structure of programmable machine](https://ik.imagekit.io/qkzwdg8a3/img-spm.jpg)

### المكونات الرئيسية:
1. **الذاكرة الرئيسية**: تتكون من نوعين أساسيين:
   - **ذاكرة الوصول العشوائي (RAM)**: تستخدم لتخزين البيانات والبرامج التي يعمل عليها الحاسوب حالياً، وتُفقد محتوياتها عند انقطاع التيار الكهربائي.
   - **ذاكرة القراءة فقط (ROM)**: تحتفظ بالتعليمات الأساسية لتشغيل الحاسوب ولا تُفقد محتوياتها عند انقطاع التيار.
2. **وحدة المعالجة المركزية (CPU)**: وهي "عقل" الحاسوب الذي يقوم بتنفيذ العمليات الحسابية والمنطقية، وتتواصل مباشرة مع الذاكرة الرئيسية.
3. **أجهزة التخزين الثانوية**: مثل الذاكرة الفلاشية، والقرص الصلب، والأقراص المدمجة (CD/DVD)، وتستخدم لتخزين البيانات بشكل دائم.
4. **أجهزة الإدخال**: مثل الفأرة ولوحة المفاتيح، وتستخدم لإدخال البيانات إلى الحاسوب.
5. **أجهزة الإخراج**: مثل الشاشة والطابعة، وتستخدم لعرض النتائج والمعلومات من الحاسوب.

## أجيال لغات البرمجة
---
### الجيل الأول
**لغة المجمع (Assembly Language)**
- تعرّف من قبل الشركة المصنعة.
- تختلف باختلاف الآلة.
- غير عملية للتطوير المباشر من قبل الإنسان.

### الجيل الثاني
**اللغات الإجرائية (Procedural/Structure Language)**
- تعتمد على فكرة الإجراءات (التوابع).
- تسمح بإعادة استخدام التعليمات البرمجية.
- أمثلة: Fortran، Pascal، Basic، C.

### الجيل الثالث
**اللغات غرضية التوجه (Object Oriented Programming - OOP)**
- تعتمد على فكرة الصفوف (Classes) والأغراض (Objects).
- أمثلة: C#، Java.

### الجيل الرابع
**اللغات التصريحية (Declarative Language)**
- أشهرها SQL المستخدمة في قواعد البيانات.
- تركز على توصيف المهمة دون توضيح خطوات التنفيذ.

### الجيل الخامس
**لغات الذكاء الاصطناعي (AI Language)**
- يحل الحاسب المسألة دون تدخل المبرمج.
- تعتمد على الاستدلال باستخدام المنطق.
- أمثلة: Prolog، LISP.

> [warning]
> ### ملاحظة
> تعتبر لغة C++ بين الجيلين الثاني والثالث.

## مدخل إلى الخوارزميات
---
### الفرق بين الخوارزمية والبرنامج

**الخوارزمية:**
- مجموعة من الخطوات الواضحة والدقيقة لحل مشكلة.
- موجهة للإنسان.
- مرتبة ومنتهية ولها زمن تنفيذ محدود.
- مكتوبة بلغة خوارزميات (لا يفهمها الحاسب).

**البرنامج:**
- مجموعة من التعليمات المكتوبة بلغة برمجة.
- موجه للحاسب.
- مكتوب بلغة برمجة (مثل C، ++C، #C).
- في النهاية يتحول إلى لغة الآلة.

### أشكال كتابة الخوارزميات
1. **لغة نصية (Pseudocode)**: 
   - تكتب باللغة العربية أو الإنجليزية بشكل هيكلي.
2. **لغة بيانية/مخطط تدفقي (Flowchart)**: 
   - تكتب باستخدام المخطط الزمني.
   - تعتمد على الرسوم البيانية.

## أنواع خطوات كتابة الخوارزمية
---
### 1. القراءة (الدخل)
- خطوة لإدخال شيء من خارج الآلة (من المستخدم).
- بعدها يجب أن يأتي متحول فقط (لأن الدخل ليس ثابتاً).
- مثال: \`read x\`.

### 2. الكتابة (الخرج)
- تعرض قيمة المتحول أو نتيجة صيغة حسابية.
- مثال: \`write x\` (يعرض قيمة x وليس الحرف x).

### 3. الإسناد
- يحسب قيمة الطرف الأيمن ويسندها إلى المتحول في الطرف الأيسر.
- تأخذ رمز \`=\` أو \`←\`.
- مثال: \`z ← x + y\` (إسناد مجموع x + y إلى z).

### 4. الشرط
**الشرط البسيط (if)**
\`\`\`
if (condition)
    block of statements
\`\`\`
ينفذ التعليمات في حال تحقق الشرط فقط.

**الشرط مع البديل (if-else)**
\`\`\`
if (condition)
    block of statements 1
else
    block of statements 2
\`\`\`
يناقش حالتين فقط.

**الشرط المتعدد (if-else if-else)**
\`\`\`
if (condition 1)
    block of statements 1
else if (condition 2)
    block of statements 2
else
    block of statements 3
\`\`\`
يمكن مناقشة أكثر من حالتين.

### 5. التكرار
- ينفذ مجموعة من الخطوات طالما بقي الشرط محققا.
\`\`\`
while (condition)
    block of statements 
\`\`\`

> ### قواعد
> - يجب وضع خطوات تضمن التعديل على قيمة أحد المتحولات في الشرط.
> - إذا لم يتم التعديل، تصبح الحلقة غير منتهية.

## مفاهيم أساسية في الخوارزمية والبرمجة
---
### 1. الثابت (Constant)
- قيمة ثابتة من البداية إلى نهاية البرنامج.
- أمثلة: أرقام (0، 1، 2)، حرف ('S')، نص ("Hello")، قيمة منطقية (true، false).
- الحرف الواحد يكتب ضمن علامات اقتباس فردية (' ').
- سلسلة المحارف تكتب ضمن علامات اقتباس مزدوجة (" ").

### 2. المتغيرات (Variables)
- قيمة لحظية قابلة للتغيير.
- لا تتغير إلا بعملية واضحة يقوم بها المبرمج.
- لها اسم ونوع محدد.
- أمثلة: x، y، z أو أي حرف أو سلسلة محارف.
- شروط أسماء المتغيرات: ألا تبدأ برقم، رمز خاص، أو اسم محجوز.

### 3. الصيغ الحسابية
- مزيج من المتغيرات والثوابت والعمليات الحسابية والمنطقية.
- مثال: \`[y - 2 * (3 + x)]\`.
- يجب مراعاة أولوية العمليات الحسابية:
  1. الأس والجذر.
  2. الأقواس.
  3. الضرب والقسمة.
  4. الجمع والطرح.

## أمثلة تطبيقية
---
### مثال 1: حساب مساحة ومحيط مربع
\`\`\`
read x
s ← x^2
write s
l ← 4x
write l
\`\`\`
### مثال 2: التحقق من إشارة عدد
\`\`\`
read x
if (x > 0)
    write "positive"
else if  (x < 0)
    write "negative"
else
    write "zero"
\`\`\`
### مثال 3: معرفة عدد خانات عدد موجب
\`\`\`
read x
if (x < 10)
    write "one place"
else if  (x < 100)
    write "two places"
else if  (x < 1000)
    write "three places"
else
    write "four places and more"
\`\`\`
### مثال 4: طباعة الأعداد من 1 إلى 100
\`\`\`
x ← 1
while (x ≤ 100)
    write x
    x ← x + 1
\`\`\`

## المخطط التدفقي (Flowchart)
---
المخطط التدفقي هو طريقة بيانية (رسومية) لتمثيل الخوارزمية. يوضح الجدول التالي العناصر الأساسية للمخطط:

| الخطوة | لغة نصية | لغة رسومية (تدفقية) |
|--------|----------|----------------------|
| البداية والنهاية | البداية / النهاية |  ![oval shape](https://ik.imagekit.io/qkzwdg8a3/tr:w-0.4/img-oval.jpg) |
|  والكتابة | اقرأ / اكتب | ![parallelogram shape](https://ik.imagekit.io/qkzwdg8a3/tr:w-0.4/img-parallelogram.jpg)   |
| إسناد / عملية حسابية  | ← / + - % / true | ![rectangular shape](https://ik.imagekit.io/qkzwdg8a3/tr:w-0.4/img-rectangular.jpg) |
| الشرط | إذا | ![condition shape](https://ik.imagekit.io/qkzwdg8a3/img-condition.jpg)  |
| التكرار | طالما | ![loop shape](https://ik.imagekit.io/qkzwdg8a3/img-loop.jpg)  |

> [warning]
> ### ملاحظات مهمة:
> - الأسهم تربط بين الأشكال المختلفة لتحديد مسار التنفيذ.
> - الشكل العام للخوارزمية:
بداية ←  مجموعة خطوات ←  نهاية.

### أمثلة على المخططات التدفقية:

1. **التحقق من إشارة عدد**:
![number sign algorithm](https://ik.imagekit.io/qkzwdg8a3/img-nsf.jpg)

**شرح المخطط التدفقي**
- البداية
- قراءة قيمة x من المستخدم
- التحقق إذا كان x > 0:
   - إذا كانت الإجابة "نعم": طباعة "موجب"
   - إذا كانت الإجابة "لا": طباعة "سالب"
- النهاية

2. **جمع عددين**:
![sumation algorithm](https://ik.imagekit.io/qkzwdg8a3/tr:w-0.7/img-sf.jpg)

**شرح المخطط التدفقي**
- البداية
- قراءة قيمتي x و y من المستخدم
- طباعة مجموع x + y
- النهاية

3. **طباعة الأعداد من 1 إلى عدد يدخله المستخدم**:
![print numbers algorithm](https://ik.imagekit.io/qkzwdg8a3/img-cf.jpg)

**شرح المخطط التدفقي**
- البداية
- قراءة قيمة x من المستخدم
- تعيين قيمة i = 1
- التحقق إذا كان i ≤ x:
   - إذا كانت الإجابة "نعم": طباعة قيمة i، ثم زيادة i بمقدار 1، والعودة للتحقق مرة أخرى
   - إذا كانت الإجابة "لا": الانتقال إلى النهاية
`
    },
    {
        id: 2,
        title: "أساسيات لغة ++C",
        hasExercises: true,
        content: `
## مراحل تنفيذ برنامج ++C
---
1. **Precompiling**: تنفيذ التعليمات التوجيهية.
2. **Compiling**: التأكد من صحة وسلامة تعليمات البرنامج.
3. **Linking**: الربط مع المكتبات.
4. **Run**: تنفيذ خطوات البرنامج.

## أنواع الأخطاء في البرمجة
---
1. **أخطاء منطقية (Logical Errors)**: خطأ غير مقصود من المبرمج (قصد شيء وكتب شيء آخر).
2. **أخطاء وقت التشغيل (Runtime Errors)**: خطأ يحدث أثناء التنفيذ مثل القسمة على صفر.
3. **أخطاء بنيوية (Syntax Errors)**: خطأ في قواعد اللغة (يكتشفه المترجم قبل التنفيذ).
4. **أخطاء الربط (Linking Errors)**: تظهر في مرحلة الربط مثل استخدام تعليمة دون تضمين مكتبتها.

## خصائص لغة ++C
---
- غير حساسة للفراغات أو الأسطر.
- معظم التعليمات تنتهي بـ \`;\`.
- حساسة للحروف الكبيرة والصغيرة.

## بنية البرنامج في ++C
---
\`\`\`cpp
#include <iostream>
using namespace std;

int main() {
    // مجموعة تعليمات
    return 0;
}
\`\`\`

### شرح البنية:
1. **\`<include <iostream#\`**:
   - \`#\` تعليمة توجيهية يقرأها الـ precompiler.
   - \`include\` تعني تضمين المكتبة.
   - \`iostream\` مكتبة معيارية للتعامل مع الدخل والخرج.

2. **\`;using namespace std\`**:
   - تختصر كتابة \`std::\` قبل كل تعليمة من مكتبة iostream.
   - \`namespace\` تقسيم منطقي لتجنب تعارض المكتبات.

3. **\`()int main\`**:
   - \`main\` هو التابع الرئيسي ومنه يبدأ تنفيذ البرنامج.
   - \`int\` تشير إلى أن التابع سيرد قيمة من نوع integer.
   - \`;return 0\` تدل على أن البرنامج انتهى دون أخطاء.

## المتغيرات في ++C
---
### خصائص المتغيرات:
1. حجم محدد في الذاكرة (ثابت لا يتغير).
2. نوع يحدد القيم التي يمكن تخزينها (ثابت لا يتغير).
3. اسم للوصول إليه.

> ### قواعد تسمية المتغيرات
> **يجوز**:
> - استخدام الحروف الإنجليزية.
> - استخدام الرمزين \`_\` و \`$\`.
> - استخدام أرقام في المنتصف أو النهاية.
>
> **لا يجوز**:
> - استخدام كلمات محجوزة في اللغة.
> - وجود فراغات (space).
> - استخدام رموز خاصة (باستثناء \`_\` و \`$\`).
> - استخدام عمليات حسابية أو منطقية.
> - البدء برقم.

### طرق تسمية متغير بعدة كلمات:
1. **طريقة camelCase**: (الكلمات متصلة والحرف الأول ابتداءاً من الكلمة الثانية كبير).
   - مثال: wayOfWriting.
   - تستخدم عادة لتسمية المتغيرات والتوابع وخصائص الغرض.
2. **طريقة SCREAMING_SNAKE_CASE**: (الكلمات بحروف كبيرة ومفصولة بـ \`_\`).
   - مثال: WAY_OF_WRITING.
   - تستخدم في تسمية الثوابت.
3. **طريقة PascalCase**: (الكلمات متصلة والحرف الأول من كل كلمة كبير).
   - مثال: WayOfWriting.
   - تستخدم عادة لتسمية الصفوف.

## أنماط المتغيرات في ++C
---
| النمط | الحجم بالبايت | المجال | شرح |
|-------|--------------|--------|------|
| char | 1 | 0 ← 255 | محرف واحد |
| short | 2 | -32768 ← 32767 | أعداد صحيحة فقط |
| int/long | 4 | أكبر من short | أعداد صحيحة فقط |
| float | 4 | 7 أرقام بعد الفاصلة | أعداد صحيحة وعشرية |
| double | 8 | 15 رقم بعد الفاصلة | أعداد صحيحة وعشرية |
| bool | 1 | true = 1 أو false = 0 | قيمة منطقية |

### تعريف المتغيرات:
\`\`\`cpp
variable_type variable_name; // تعريف فقط
variable_type variable_name = value; // تعريف مع إسناد قيمة ابتدائية
\`\`\`

## الثوابت في ++C
---
يمكن تعريف الثوابت بطريقتين:

1. **باستخدام \`const\`**:
\`\`\`cpp
const constant_type constant_name = value;
\`\`\`

2. **باستخدام \`define#\`**:
\`\`\`cpp
#define constant_name value
\`\`\`

> [warning]
> ### ملاحظة
> عند استخدام \`define#\` لا نستخدم \`;\` و \`=\`.

## العمليات في لغة ++C
---
### عمليات المقارنة
- \`==\` : يساوي (للمقارنة وليست للإسناد)
- \`=!\` : لا يساوي
- \`>\` : أصغر من
- \`<\` : أكبر من
- \`=>\` : أصغر من أو يساوي
- \`=<\` : أكبر من أو يساوي

تُستخدم للمقارنة بين الثوابت أو المتغيرات أو الصيغ الحسابية. جميع عمليات المقارنة تعيد قيمة منطقية (\`true\` أو \`false\`).

### العمليات المنطقية
- \`&&\` (and): تعيد \`true\` فقط إذا كان الشرطان صحيحين
- \`||\` (or): تعيد \`true\` إذا كان أحد الشرطين صحيحًا على الأقل
- \`!\` (not): تقلب القيمة المنطقية

جدول الحقيقة للعمليات المنطقية

| a && b | a \\|\\| b | b | a |
|:---:|:---:|:---:|:---:|
| true | true | true | true |
| false | false | false | false |
| false | true | true | false |
| false | true | false | true |

### العمليات الحسابية
---
- الجمع: \`+\`.
- الطرح: \`-\`.
- الضرب: \`*\`.
- القسمة الصحيحة: \`/\` (تعيد عدد صحيح فقط مثل \`7/3 = 2\`).
- باقي القسمة: \`%\`.

> ### قاعدة
> للحصول على نتيجة عشرية في القسمة، يجب أن يكون أحد المعاملات على الأقل من النوع العشري:
> \`\`\`cpp
> 7.0/2   // يعطي 3.5
> 7/2.0   // يعطي 3.5
> \`\`\`

## الإسناد المركب
---
\`\`\`cpp
i = i + 1  ⟺  i += 1
i = i - 1  ⟺  i -= 1
i = i * 1  ⟺  i *= 1
i = i / 1  ⟺  i /= 1
i = i % 1  ⟺  i %= 1
\`\`\`

## عمليات الزيادة والنقصان
---
- \`++i\`: زيادة بمقدار 1 ثم استخدام القيمة.
- \`i++\`: استخدام القيمة ثم زيادة بمقدار 1.

**مثال على الإختلاف**:
\`\`\`cpp
// الطريقة الأولى
int x = 4;
int y = x++;  // y=4, x=5

// الطريقة الثانية
int x = 4;
int y = ++x;  // y=5, x=5
\`\`\`

## تعليمات الإدخال والإخراج
---
### الإدخال (القراءة):
\`\`\`cpp
cin >> x >> y;  // قراءة قيمتين متتاليتين

// يعادل
cin >> x;
cin >> y;
\`\`\`

### الإخراج (الكتابة):
\`\`\`cpp
cout << x << y;  // طباعة قيمتين متتاليتين

// يعادل
cout << x;
cout << y;
\`\`\`

### أمثلة للإخراج:
- طباعة النص كما هو: \`;"cout << "x\` يعطي بالخرج \`x\`.
- طباعة قيمة متغير: \`;int x = 3; cout << x\`  يعطي بالخرج 3.
- طباعة سطر جديد: \`;cout << endl\` أو<br>
\`;"cout << "\\n\`.
- طباعة مسافة أفقية: 
\`;"cout << "\\t\`.
- طباعة رموز خاصة:
  - لطباعة \`\\\`:
  \`"\\\\"\`.
  - لطباعة \`'\`:
  \`"'\\"\`.
  - لطباعة \`"\`: 
  \`""\\"\`.
  - لحذف حرف قبلها:
  \`"b\\"\`.
  - محرف خالي (القيمة الأولية لأي محرف): \`"0\\"\`.
`
    }
];
